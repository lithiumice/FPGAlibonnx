


ARM Macro Assembler    Page 1 


    1 00000000         ;/*********************** (C) COPYRIGHT 2010 Libraworks 
                       *************************
    2 00000000         ;* File Name : os_cpu_a.asm 
    3 00000000         ;* Author  : Librae 
    4 00000000         ;* Version  : V1.0
    5 00000000         ;* Date   : 06/10/2010
    6 00000000         ;* Description : ÂÖ≥‰∫éSTM32ÁöÑÂ∫ïÂ±Ç‰ª£Á†ÅÊèê‰æõ
    7 00000000         ;*******************************************************
                       ************************/
    8 00000000         
    9 00000000                 IMPORT           OSRunning   ; ÂºïÂÖ•Â§ñÁïåÁöÑÂè
                                                            òÈáè
   10 00000000                 IMPORT           OSPrioCur
   11 00000000                 IMPORT           OSPrioHighRdy
   12 00000000                 IMPORT           OSTCBCur
   13 00000000                 IMPORT           OSTCBHighRdy
   14 00000000                 IMPORT           OSIntNesting
   15 00000000                 IMPORT           OSIntExit
   16 00000000                 IMPORT           OSTaskSwHook
   17 00000000         
   18 00000000                 EXPORT           OSStartHighRdy
   19 00000000                 EXPORT           OSCtxSw
   20 00000000                 EXPORT           OSIntCtxSw
   21 00000000                 EXPORT           OS_CPU_SR_Save ; ÂêëÂ§ñÈÉ®Êèê‰æ
                                                            õÁöÑÂáΩÊï∞
   22 00000000                 EXPORT           OS_CPU_SR_Restore
   23 00000000                 EXPORT           PendSV_Handler
   24 00000000         
   25 00000000         
   26 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ‰∏≠Êñ≠ÊéßÂà∂ÂØÑÂ≠
                                                            òÂô®ÁöÑÂú∞ÂùÄ
   27 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; Á≥ªÁªü‰ºòÂÖàÁ∫ßÂØ
                                                            ÑÂ≠òÂô®
   28 00000000 FFFF0000 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF0000  ; PendSVÁöÑ‰ºòÂÖàÁ∫
                                                            ßÔºàÊúÄ‰ΩéÔºâ
   29 00000000         ;
   30 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Ëß¶ÂèëPendSV‰∏≠Êñ
                                                            ≠ÁöÑÊï∞ÂÄº
   31 00000000         
   32 00000000         
   33 00000000                 PRESERVE8
   34 00000000         
   35 00000000                 AREA             |.text|, CODE, READONLY
   36 00000000                 THUMB
   37 00000000         
   38 00000000         
   39 00000000         
   40 00000000         ;*******************************************************
                       *************************************************
   41 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS



ARM Macro Assembler    Page 2 


   42 00000000         ;
   43 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   44 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   45 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   46 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   47 00000000         ;              into the CPU's status register.
   48 00000000         ;
   49 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   50 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   51 00000000         ;
   52 00000000         ;
   53 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   54 00000000         ;
   55 00000000         ;                 void Task (void *p_arg)
   56 00000000         ;                 {
   57 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   58 00000000         ;                     OS_CPU_SR  cpu_sr;
   59 00000000         ;                 #endif
   60 00000000         ;
   61 00000000         ;                          :
   62 00000000         ;                          :
   63 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   64 00000000         ;                          :
   65 00000000         ;                          :
   66 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   67 00000000         ;                          :
   68 00000000         ;                          :
   69 00000000         ;                 }
   70 00000000         ;*******************************************************
                       *************************************************
   71 00000000         
   72 00000000         OS_CPU_SR_Save
   73 00000000 F3EF 8010       MRS              R0, PRIMASK ;Âä†ËΩΩPRIMASKÂØÑÂ≠
                                                            òÂô®Âú∞ÂùÄ
   74 00000004 B672            CPSID            I           ;PRIMASK=1,ÂÖ≥Èó≠Êâ
                                                            ÄÊúâ‰∏≠Êñ≠ÔºàÈô§‰∫Ü
                                                            nmi and hardfaultÔº
                                                            â
   75 00000006 4770            BX               LR          ;ËøîÂõû
   76 00000008         
   77 00000008         OS_CPU_SR_Restore
   78 00000008 F380 8810       MSR              PRIMASK, R0 ;
   79 0000000C 4770            BX               LR          ;
   80 0000000E         
   81 0000000E         
   82 0000000E         
   83 0000000E         ;*******************************************************
                       *************************************************
   84 0000000E         ;                                          START MULTITA
                       SKING  ÂºÄÂßã‰ªªÂä°



ARM Macro Assembler    Page 3 


   85 0000000E         ;                                       void OSStartHigh
                       Rdy(void) 
   86 0000000E         ;
   87 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
   88 0000000E         ;              the first task to start.ÂáΩÊï∞Ëß¶ÂèëPendS
                       VÂºÇÂ∏∏Ôºà‰ªéÊú¨Ë¥®‰∏äËÆ≤,ÊòØÂØºËá¥‰∏ä‰∏ãÊñáÂàáÊç¢ÔºâÂØº
                       Ëá¥Á¨¨‰∏Ä‰∏™‰ªªÂä°ÂºÄÂßã
   89 0000000E         ;
   90 0000000E         ;           2) OSStartHighRdy() MUST: ÂÖ≥ÈîÆÊµÅÁ®ã
   91 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
   92 0000000E         ;         ËÆæÁΩÆPendSVÂºÇÂ∏∏‰ºòÂÖàÁ∫ßÂà∞ÊúÄ‰Ωé
   93 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
   94 0000000E         ;         ËÆæÁΩÆÂàùÂßãËøõÁ®ãÂ†ÜÊ†àÂà∞0‰ΩçÁΩÆÔºåÁõÆÁöÑÊòØ
                       ÂëäËØâ‰∏ä‰∏ãÊñá/‰ªªÂä°ÂàáÊç¢Âô®Ëøô‰∏™ÂáΩÊï∞Á¨¨‰∏Ä‰∏™ÊâßË
                       °å
   95 0000000E         ;              c) Set OSRunning to TRUE;
   96 0000000E         ;         ËÆæÁΩÆOSRunningÊ†áÂøó‰∏∫TRUE
   97 0000000E         ;              d) Trigger PendSV exception;
   98 0000000E         ;         ÂàáÊç¢PendSVÂºÇÂ∏∏
   99 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  100 0000000E         ;         ‰ΩøËÉΩ‰∏≠Êñ≠Ôºà‰ªªÂä°Â∞ÜÈÄöËøáÂêØÁî®‰∏≠Êñ≠ËøêË
                       °åÔºâ
  101 0000000E         ;               ÂÖ∂ÈÄöËøáOSSTart()ÂÆåÊàêË∞ÉÁî®
  102 0000000E         ;*******************************************************
                       *************************************************
  103 0000000E         
  104 0000000E         
  105 0000000E         OSStartHighRdy
  106 0000000E 4C20            LDR              R4, =NVIC_SYSPRI2 ; set the Pen
                                                            dSV exception prior
                                                            ity
  107 00000010 4D20            LDR              R5, =NVIC_PENDSV_PRI
  108 00000012 6025            STR              R5, [R4]
  109 00000014         
  110 00000014 F04F 0400       MOV              R4, #0      ; set the PSP to 0 
                                                            for initial context
                                                             switch call
  111 00000018 F384 8809       MSR              PSP, R4     ; Â∞ÜPSPÊåáÈíàÊã®Âà
                                                            ∞Á©∫Èó≤‰ªªÂä°ÁöÑÂºÄ
                                                            Âßã‰ΩçÁΩÆ
  112 0000001C         ; PENDSVÂõûÂéªÊâßË°åPendSV_Handler_Nosave
  113 0000001C 4C1E            LDR              R4, =OSRunning 
                                                            ; OSRunning = TRUE
  114 0000001E F04F 0501       MOV              R5, #1      ; ÂëäËØâÁ≥ªÁªüÂºÄÂß
                                                            ãËøêË°å
  115 00000022 7025            STRB             R5, [R4]
  116 00000024         
  117 00000024         ;
  118 00000024 4C1D            LDR              R4, =NVIC_INT_CTRL ;trigger the
                                                             PendSV exception (
                                                            causes context swit
                                                            ch)
  119 00000026 F04F 5580       LDR              R5, =NVIC_PENDSVSET 
                                                            ;Ëß¶ÂèëPENDSV‰∏≠Êñ≠
                                                            



ARM Macro Assembler    Page 4 


  120 0000002A 6025            STR              R5, [R4]
  121 0000002C         
  122 0000002C B662            CPSIE            I           ;enable interrupts 
                                                            at processor level
  123 0000002E         OSStartHang
  124 0000002E E7FE            B                OSStartHang ;should never get h
                                                            ere
  125 00000030         
  126 00000030         
  127 00000030         ;*******************************************************
                       *************************************************
  128 00000030         ;                               PERFORM A CONTEXT SWITCH
                        (From task level) ‰ªé‰ªªÂä°Á∫ßÊâßË°å‰∏Ä‰∏™‰∏ä‰∏ãÊñáÂàáÊ
                       ç¢
  129 00000030         ;                                           void OSCtxSw
                       (void)
  130 00000030         ;
  131 00000030         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  132 00000030         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  133 00000030         ;OSCtxSw Âíå OSIntCtxSw Ëøô‰∏§‰∏™ÊòØÁî®Êù•ÂÅö‰ªªÂä°ÂàáÊç
                       ¢ÁöÑÔºåËøô‰∏§‰∏™ÁúãËµ∑Êù•ÈÉΩÊòØ‰∏ÄÊ†∑ÁöÑÔºåÂÖ∂ÂÆûÂÆÉ
  134 00000030         ;‰ª¨ÈÉΩÂè™ÊòØËß¶Âèë‰∏Ä‰∏™ PendSV ‰∏≠Êñ≠ÔºåÂÖ∑‰ΩìÁöÑÂàáÊç
                       ¢ËøáÁ®ãÂú® PendSV ‰∏≠Êñ≠ÊúçÂä°ÂáΩÊï∞ÈáåÈù¢ËøõË°å„ÄÇËøô‰∏
                       §‰∏™
  135 00000030         ;ÂáΩÊï∞ÁúãËµ∑Êù•ÊòØ‰∏ÄÊ†∑ÁöÑÔºå‰ΩÜÊòØ‰ªñ‰ª¨ÁöÑÊÑè‰πâÊòØ‰
                       ∏çÂêåÁöÑÔºåOSCtxSw ÊòØ‰ªªÂä°Á∫ßÂàáÊç¢ÔºåÊØîÂ¶Ç‰ªé‰ªªÂä° 
                       A ÂàáÊç¢
  136 00000030         ;*******************************************************
                       *************************************************
  137 00000030         
  138 00000030         OSCtxSw
  139 00000030 B430            PUSH             {R4, R5}
  140 00000032 4C1A            LDR              R4, =NVIC_INT_CTRL ;‰∏≠Êñ≠ÊéßÂà
                                                            ∂ÂØÑÂ≠òÂô®ÊâÄÂú®ÁöÑ
                                                            Âú∞ÂùÄ (causes cont
                                                            ext switch)
  141 00000034 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  142 00000038 6025            STR              R5, [R4]
  143 0000003A BC30            POP              {R4, R5}
  144 0000003C 4770            BX               LR
  145 0000003E         
  146 0000003E         ;‰∏≠Êñ≠ÂàáÊç¢Âà∞‰ªªÂä°
  147 0000003E         OSIntCtxSw
  148 0000003E B430            PUSH             {R4, R5}
  149 00000040 4C16            LDR              R4, =NVIC_INT_CTRL
  150 00000042 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  151 00000046 6025            STR              R5, [R4]
  152 00000048 BC30            POP              {R4, R5}
  153 0000004A 4770            BX               LR
  154 0000004C BF00            NOP                          ;ÊèêÁ§∫MCUÊàëÂ∑≤Áªè
                                                            ÂÆåÊàê‰∫ÜÂÖ•Ê†à‰∏çÈ
                                                            úÄË¶ÅÂÜçËøõË°å‰∏ÄÊ¨
                                                            °
  155 0000004E         
  156 0000004E         
  157 0000004E         PendSV_Handler
  158 0000004E B672            CPSID            I           ; ÂÖ≥Èó≠‰∏≠Êñ≠ Prev



ARM Macro Assembler    Page 5 


                                                            ent interruption du
                                                            ring context switch
                                                            
  159 00000050 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  160 00000054 B128            CBZ              R0, PendSV_Handler_Nosave ; PSP
                                                            ÊòØÂê¶Á≠â‰∫é0ÔºåÂà§
                                                            Êñ≠ÊòØ‰∏çÊòØÁ¨¨‰∏ÄÊ
                                                            ¨°Ë∞ÉÁî®
  161 00000056         ; Â¶ÇÊûúÊòØÁöÑËØù‰∏ãÈù¢‰∏ÄÊÆµÂ∞±‰∏çÈúÄË¶ÅÊâßË°å‰∫ÜSkip r
                       egister save the first time
  162 00000056         
  163 00000056 3820            SUBS             R0, R0, #0x20 ; 0x20‰ª£Ë°®ÈúÄË¶
                                                            ÅÂêëÂ†ÜÊ†àÂéãÂÖ•32‰
                                                            ∏™Â≠óËäÇSave remain
                                                            ing regs r4-11 on p
                                                            rocess stack
  164 00000058 E880 0FF0       STM              R0, {R4-R11}
  165 0000005C         
  166 0000005C 4910            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  167 0000005E 6809            LDR              R1, [R1]
  168 00000060 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  169 00000062         
  170 00000062         ; At this point, entire context of process has been save
                       d
  171 00000062         PendSV_Handler_Nosave
  172 00000062 B500            PUSH             {R14}       ; Ë∞ÉÁî®ÁãóÂ≠êÂáΩÊï
                                                            ∞Save LR exc_return
                                                             value
  173 00000064 480F            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  174 00000066 4780            BLX              R0
  175 00000068 F85D EB04       POP              {R14}
  176 0000006C         
  177 0000006C 480E            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  178 0000006E 490F            LDR              R1, =OSPrioHighRdy
  179 00000070 780A            LDRB             R2, [R1]
  180 00000072 7002            STRB             R2, [R0]
  181 00000074         
  182 00000074 480A            LDR              R0, =OSTCBCur ; *R0=R2 Êó¢OSTCB
                                                            Cur  = OSTCBHighRdy
                                                            ;
  183 00000076 490E            LDR              R1, =OSTCBHighRdy ; ÊòØ‰ªªÂä°Êé
                                                            ßÂà∂ÂùóÁªìÊûÑ‰ΩìÊåá
                                                            ÈíàÂèØ‰ª•ÊåáÂêëÊúÄË
                                                            Ø•‰ºòÂÖàÁ∫ßÁöÑÊåáÈí
                                                            à
  184 00000078 680A            LDR              R2, [R1]
  185 0000007A 6002            STR              R2, [R0]
  186 0000007C         
  187 0000007C 6810            LDR              R0, [R2]    ; R0=OSTCBHighRdy R
                                                            0 is new process SP
                                                            ; SP = OSTCBHighRdy
                                                            ->OSTCBStkPtr;
  188 0000007E E890 0FF0       LDM              R0, {R4-R11} ; ÊÅ¢Â§çÂ†ÜÊ†àRest



ARM Macro Assembler    Page 6 


                                                            ore r4-11 from new 
                                                            process stack
  189 00000082 3020            ADDS             R0, R0, #0x20
  190 00000084 F380 8809       MSR              PSP, R0     ; R0+=0X20 R0Â∞±ÊòØ
                                                            Êòü‰ªªÂä°ÁöÑÊ†àÈ°∂Ê
                                                            åáÈíàLoad PSP with 
                                                            new process SP
  191 00000088 F04E 0E04       ORR              LR, LR, #0x04 ; Â∞ÜPSPÁöÑÂÄºÂèò
                                                            ‰∏∫R0 Ensure except
                                                            ion return uses pro
                                                            cess stack
  192 0000008C B662            CPSIE            I           ; Â∞ÜLR ‰Ωç2ÁΩÆ1 Ôº
                                                            åË°®Á§∫ËøîÂõûÂêéÂõû
                                                            Âà∞ËøõÁ®ã
  193 0000008E 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  194 00000090         
  195 00000090                 end
              E000ED20 
              FFFF0000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=..\obj\os_cpu_a.d -o..\obj\os_cpu_a.o -IE:\WORKPLACE\YLot\stm32c8t
6_ucos\USER\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -
IC:\Keil_v5\ARM\CMSIS\Include --predefine="__MICROLIB SETA 1" --predefine="__UV
ISION_VERSION SETA 518" --predefine="STM32F10X_MD SETA 1" --list=.\os_cpu_a.lst
 ..\UCOSII\PORT\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 35 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000030

Symbol: OSCtxSw
   Definitions
      At line 138 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 19 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000003E

Symbol: OSIntCtxSw
   Definitions
      At line 147 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 20 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000002E

Symbol: OSStartHang
   Definitions
      At line 123 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 124 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 105 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 18 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 77 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 22 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 72 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 21 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 0000004E

Symbol: PendSV_Handler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 157 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 23 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: PendSV_Handler used once
PendSV_Handler_Nosave 00000062

Symbol: PendSV_Handler_Nosave
   Definitions
      At line 171 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 160 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: PendSV_Handler_Nosave used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 26 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 118 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 140 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 149 in file ..\UCOSII\PORT\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 30 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 119 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 141 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 150 in file ..\UCOSII\PORT\os_cpu_a.asm

NVIC_PENDSV_PRI FFFF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 28 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 107 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 27 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 106 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: NVIC_SYSPRI2 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 15 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 14 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 10 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 177 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 11 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 178 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 9 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 113 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 12 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 166 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 182 in file ..\UCOSII\PORT\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 13 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 183 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTaskSwHook
   Definitions
      At line 16 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 173 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSTaskSwHook used once
8 symbols
356 symbols in table
